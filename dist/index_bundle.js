(()=>{"use strict";var e={198:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(537),i=n.n(a),r=n(645),o=n.n(r)()(i());o.push([e.id,"\n.modalFormContainer {\n    display: flex;\n    justify-content: center;    \n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color:rgba(36, 36, 36, 0.9);\n    padding-top: 15%;\n    padding-bottom: 20px;\n    \n    visibility: hidden;\n    opacity:0;\n    pointer-events: none;\n    transition: 0.4s;\n}\n.formContainerVisible {\n    visibility: visible;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.formModalListItemEdit {\ndisplay: flex;\nflex-direction: column;\nborder: 5px solid #979595;\nbackground: rgb(222, 223, 223);\nborder-radius: 15px;\ncolor: black;\nmin-width: 250px;\nmax-height: 40vh;\noverflow: auto;\ntransition: border 2s;\n}\n\n.updateHasSavedMessageFormModal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-self: center;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    opacity: 0;\n    width:100px;\n    transition: 3s;\n}\n\n.updateHasSavedMessageFormModalShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.formModalListItemEditSaved {\n    border: 5px solid #30db05;\n}","",{version:3,sources:["webpack://./src/formModalStyle.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,sCAAsC;IACtC,gBAAgB;IAChB,oBAAoB;;IAEpB,kBAAkB;IAClB,SAAS;IACT,oBAAoB;IACpB,gBAAgB;AACpB;AACA;IACI,mBAAmB;IACnB,UAAU;IACV,mBAAmB;AACvB;;AAEA;AACA,aAAa;AACb,sBAAsB;AACtB,yBAAyB;AACzB,8BAA8B;AAC9B,mBAAmB;AACnB,YAAY;AACZ,gBAAgB;AAChB,gBAAgB;AAChB,cAAc;AACd,qBAAqB;AACrB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,kCAAkC;IAClC,yBAAyB;IACzB,uBAAuB;IACvB,kBAAkB;IAClB,wBAAwB;IACxB,WAAW;IACX,UAAU;IACV,WAAW;IACX,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,UAAU;;AAEd;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["\n.modalFormContainer {\n    display: flex;\n    justify-content: center;    \n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color:rgba(36, 36, 36, 0.9);\n    padding-top: 15%;\n    padding-bottom: 20px;\n    \n    visibility: hidden;\n    opacity:0;\n    pointer-events: none;\n    transition: 0.4s;\n}\n.formContainerVisible {\n    visibility: visible;\n    opacity: 1;\n    pointer-events: all;\n}\n\n.formModalListItemEdit {\ndisplay: flex;\nflex-direction: column;\nborder: 5px solid #979595;\nbackground: rgb(222, 223, 223);\nborder-radius: 15px;\ncolor: black;\nmin-width: 250px;\nmax-height: 40vh;\noverflow: auto;\ntransition: border 2s;\n}\n\n.updateHasSavedMessageFormModal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-self: center;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    opacity: 0;\n    width:100px;\n    transition: 3s;\n}\n\n.updateHasSavedMessageFormModalShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.formModalListItemEditSaved {\n    border: 5px solid #30db05;\n}"],sourceRoot:""}]);const s=o},426:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(537),i=n.n(a),r=n(645),o=n.n(r)()(i());o.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n\nbody {\n    background-color: rgb(41, 41, 41);\n    color: white;\n}\n\n.nav {\n    display: flex;\n    justify-content: space-between;\n}\n\n.logoContainer {\n    display: flex;\n    flex-direction: row;\n    gap: 15px;\n}\n\n.navTitle {\n    display: flex;\n}\n\n.updateHasSavedMessage {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    width:100px;\n    opacity: 0;\n    z-index: -1;\n    transition: 2s;\n    position: fixed;\n    right: 0;\n}\n.updateHasSavedMessageShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.navAddNewItem {\n    display: flex;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin-top: 15px;\n    transition: 1s;\n    \n}\n\n.navAddNewItemLeftMenuOut {\n    background-color: #fffbfb;\n    color: #5c5959;\n    height: 50px;\n    margin-top: 0px;\n}\n\n.mainContainerDiv {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n\n.leftMenu {\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    position: fixed;\n    top: 0;\n    left: 0;\n    overflow: none;\n    width: 50px;\n    height: 100vh;\n    background-color: rgb(118, 118, 115);\n    transition: 1s;\n}\n\n\n.leftMenuFlyOut {\n    width: 200px;\n    background-color: rgb(201, 200, 198);\n    overflow: auto;\n}\n.leftMenuFlyOut::-webkit-scrollbar {\n    width: 10px;\n    background: #f1f1f1; \n}\n.leftMenuFlyOut::-webkit-scrollbar-track {\n    background: #5c5959; \n}\n.leftMenuFlyOut::-webkit-scrollbar-thumb {\n    background: rgb(77, 76, 76); \n}\n  .leftMenuFlyOut::-webkit-scrollbar-thumb:hover {\n    background: rgb(225, 222, 222); \n}\n\n\n.burgerFlyOut {\n    width:30px;\n    align-self: center;\n    transition: 1s;\n    margin-top: 10px;\n}\n.burgerFlyOutHide {\n    width: 0px;\n    height:0px;\n    transform: translate(-100vw, 0vh);\n}\n\n\n.leftMenuProjectItemList {\n    list-style-type: none;\n    padding-left: 0px;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n}\n\n.leftMenuProjectItemListShow {\n    transform: translate(0vw, 0vh);   \n}\n\n.leftMenuProjectItem {\n    display: flex;\n    align-items: center;\n    text-align: left;\n    width:180px;\n    border: 1px solid rgb(70, 72, 72);\n    background-color: rgb(255, 255, 255)45);\n    color: black;\n    border-radius: 0px 6px 6px 0px;\n    margin-top: 1px;\n    padding: 5px;\n    cursor: pointer;\n    margin-top: 3px;\n}\n\n.leftMenuProjectItem:hover {\n    background-color: rgb(177, 176, 176);\n}\n\n.ListImgEle {\n    width:20px;\n    height: 20px;\n    margin-right: 5px;\n}\n\n.leftMenuProjectItemText {\n    font-size: 1rem;\n}\n\n.leftMenuItemShowAsSelected {\n    background-color: rgb(176, 176, 176);\n    color: white;\n\n}\n\n.mainPageListContainer {\n    margin-left: 100px;\n    height: 100vh;\n}\n\n.mainPageListContentNavBar {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding-top:10px;\n    gap: 15px;\n    font-weight: bold;\n}\n.mainPageListContent {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    width:80vw;\n    overflow: auto;\n    padding: 10px;\n}\n\n.contentBreakPoint {\n    width: 80vw;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n    height:0px;\n}\n.contentBreakPointShow {\n    border: 1px solid rgb(147, 147, 145);\n    border-radius: 3px;\n    margin-top: 2vh;\n    transform: translate(0vw, 0vh);\n    height:100%;\n}\n.contentBreakPointImg {\n    width:23px;\n}\n\n.breakPointHeading {\n    display: flex; \n    align-items: center;\n    gap: 4px;\n    font-weight: bold;\n    padding: 5px;\n}\n\n.mainPageListItemCard {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n    padding-bottom: 10px;\n    padding-top: 10px;\n    width: 100%;\n    border-bottom: 1px solid rgb(99, 97, 97);\n    transition: 0.2s;\n}\n\n.mainPageListItemCardMouseInside {\n    background-color: #5c5959;\n    cursor: pointer;\n}\n\n.mainPageListItemCardActive {\n    /* border: 1px solid white; */\n    background-color: #5c5959;\n    border-radius: 3px;\n}\n\n.mainPageListItemContentLeft {\n    display: flex;\n    flex-direction: column;\n}\n\n.mainPageListItemContentRight {\n    display: flex;\n}\n\n.formDisplayDueDate {\n    margin-left: 25px;\n    font-size: 0.8rem;\n    color: #b6acac;\n}\n\n.formDisplayDueDate:hover {\n    color: #b6acac;\n    text-decoration: underline;\n}\n\n.mainPageListItemForm {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.listFormTitleText {\n    border: 0px;\n    background-color:rgba(0, 0, 0, 0);\n    color: white;\n    resize: none;\n    margin-left: 4px;\n    width: 60vw;\n    height: 1.2rem;\n}\n\n.listFormTitleText:hover{\n    border-left: 2px dotted white;\n}\n\n.listFormTitleText:focus{\n    outline: none;\n    border-left: 2px dotted white;\n}\n\n\n.checkBoxImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n    cursor: pointer;\n}\n.checkBoxImgEle:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n.pencilImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n    cursor: pointer;\n}\n.pencilImgEle:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n\n.trashImgEle {\n    width:28px;\n    margin: 0px 10px 0px 4px;\n    cursor: pointer;\n}\n.trashImgEle:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n\n@keyframes showActive {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(20deg) scale(1.35); }\n    75% { transform: rotate(-20deg) scale(1.35); }\n    100% { transform: rotate(00deg);}\n  }\n\n\n\n@media (max-width: 450px) {\n\n    /* .leftMenu {\n        width:25px;\n    }\n    .leftMenuProjectItemList {\n        transform: translate(-100vw, 0vh);\n        transition: 1s;\n    }\n\n    .burgerFlyOut {\n        display: flex;\n        width: 20px;\n        height: 20px;\n        transform: translate(0vw, 0vh);   \n        transition: 0.3s;\n    } */\n  \n  }","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n\nbody {\n    background-color: rgb(41, 41, 41);\n    color: white;\n}\n\n.nav {\n    display: flex;\n    justify-content: space-between;\n}\n\n.logoContainer {\n    display: flex;\n    flex-direction: row;\n    gap: 15px;\n}\n\n.navTitle {\n    display: flex;\n}\n\n.updateHasSavedMessage {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    width:100px;\n    opacity: 0;\n    z-index: -1;\n    transition: 2s;\n    position: fixed;\n    right: 0;\n}\n.updateHasSavedMessageShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.navAddNewItem {\n    display: flex;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    margin-top: 15px;\n    transition: 1s;\n    \n}\n\n.navAddNewItemLeftMenuOut {\n    background-color: #fffbfb;\n    color: #5c5959;\n    height: 50px;\n    margin-top: 0px;\n}\n\n.mainContainerDiv {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n\n.leftMenu {\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    position: fixed;\n    top: 0;\n    left: 0;\n    overflow: none;\n    width: 50px;\n    height: 100vh;\n    background-color: rgb(118, 118, 115);\n    transition: 1s;\n}\n\n\n.leftMenuFlyOut {\n    width: 200px;\n    background-color: rgb(201, 200, 198);\n    overflow: auto;\n}\n.leftMenuFlyOut::-webkit-scrollbar {\n    width: 10px;\n    background: #f1f1f1; \n}\n.leftMenuFlyOut::-webkit-scrollbar-track {\n    background: #5c5959; \n}\n.leftMenuFlyOut::-webkit-scrollbar-thumb {\n    background: rgb(77, 76, 76); \n}\n  .leftMenuFlyOut::-webkit-scrollbar-thumb:hover {\n    background: rgb(225, 222, 222); \n}\n\n\n.burgerFlyOut {\n    width:30px;\n    align-self: center;\n    transition: 1s;\n    margin-top: 10px;\n}\n.burgerFlyOutHide {\n    width: 0px;\n    height:0px;\n    transform: translate(-100vw, 0vh);\n}\n\n\n.leftMenuProjectItemList {\n    list-style-type: none;\n    padding-left: 0px;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n}\n\n.leftMenuProjectItemListShow {\n    transform: translate(0vw, 0vh);   \n}\n\n.leftMenuProjectItem {\n    display: flex;\n    align-items: center;\n    text-align: left;\n    width:180px;\n    border: 1px solid rgb(70, 72, 72);\n    background-color: rgb(255, 255, 255)45);\n    color: black;\n    border-radius: 0px 6px 6px 0px;\n    margin-top: 1px;\n    padding: 5px;\n    cursor: pointer;\n    margin-top: 3px;\n}\n\n.leftMenuProjectItem:hover {\n    background-color: rgb(177, 176, 176);\n}\n\n.ListImgEle {\n    width:20px;\n    height: 20px;\n    margin-right: 5px;\n}\n\n.leftMenuProjectItemText {\n    font-size: 1rem;\n}\n\n.leftMenuItemShowAsSelected {\n    background-color: rgb(176, 176, 176);\n    color: white;\n\n}\n\n.mainPageListContainer {\n    margin-left: 100px;\n    height: 100vh;\n}\n\n.mainPageListContentNavBar {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding-top:10px;\n    gap: 15px;\n    font-weight: bold;\n}\n.mainPageListContent {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    width:80vw;\n    overflow: auto;\n    padding: 10px;\n}\n\n.contentBreakPoint {\n    width: 80vw;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n    height:0px;\n}\n.contentBreakPointShow {\n    border: 1px solid rgb(147, 147, 145);\n    border-radius: 3px;\n    margin-top: 2vh;\n    transform: translate(0vw, 0vh);\n    height:100%;\n}\n.contentBreakPointImg {\n    width:23px;\n}\n\n.breakPointHeading {\n    display: flex; \n    align-items: center;\n    gap: 4px;\n    font-weight: bold;\n    padding: 5px;\n}\n\n.mainPageListItemCard {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n    padding-bottom: 10px;\n    padding-top: 10px;\n    width: 100%;\n    border-bottom: 1px solid rgb(99, 97, 97);\n    transition: 0.2s;\n}\n\n.mainPageListItemCardMouseInside {\n    background-color: #5c5959;\n    cursor: pointer;\n}\n\n.mainPageListItemCardActive {\n    /* border: 1px solid white; */\n    background-color: #5c5959;\n    border-radius: 3px;\n}\n\n.mainPageListItemContentLeft {\n    display: flex;\n    flex-direction: column;\n}\n\n.mainPageListItemContentRight {\n    display: flex;\n}\n\n.formDisplayDueDate {\n    margin-left: 25px;\n    font-size: 0.8rem;\n    color: #b6acac;\n}\n\n.formDisplayDueDate:hover {\n    color: #b6acac;\n    text-decoration: underline;\n}\n\n.mainPageListItemForm {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.listFormTitleText {\n    border: 0px;\n    background-color:rgba(0, 0, 0, 0);\n    color: white;\n    resize: none;\n    margin-left: 4px;\n    width: 60vw;\n    height: 1.2rem;\n}\n\n.listFormTitleText:hover{\n    border-left: 2px dotted white;\n}\n\n.listFormTitleText:focus{\n    outline: none;\n    border-left: 2px dotted white;\n}\n\n\n.checkBoxImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n    cursor: pointer;\n}\n.checkBoxImgEle:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n.pencilImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n    cursor: pointer;\n}\n.pencilImgEle:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n\n.trashImgEle {\n    width:28px;\n    margin: 0px 10px 0px 4px;\n    cursor: pointer;\n}\n.trashImgEle:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n\n@keyframes showActive {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(20deg) scale(1.35); }\n    75% { transform: rotate(-20deg) scale(1.35); }\n    100% { transform: rotate(00deg);}\n  }\n\n\n\n@media (max-width: 450px) {\n\n    /* .leftMenu {\n        width:25px;\n    }\n    .leftMenuProjectItemList {\n        transform: translate(-100vw, 0vh);\n        transition: 1s;\n    }\n\n    .burgerFlyOut {\n        display: flex;\n        width: 20px;\n        height: 20px;\n        transform: translate(0vw, 0vh);   \n        transition: 0.3s;\n    } */\n  \n  }"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);a&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var r={},o=[],s=0;s<e.length;s++){var d=e[s],l=a.base?d[0]+a.base:d[0],c=r[l]||0,A="".concat(l," ").concat(c);r[l]=c+1;var u=n(A),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=i(m,a);a.byIndex=s,t.splice(s,0,{identifier:A,updater:p,references:1})}o.push(A)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var r=a(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var s=n(r[o]);t[s].references--}for(var d=a(e,i),l=0;l<r.length;l++){var c=n(r[l]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=d}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,i&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},360:(e,t,n)=>{e.exports=n.p+"319a85031255c4db50c7.png"},646:(e,t,n)=>{e.exports=n.p+"33c217c8c748af0ac16b.png"},200:(e,t,n)=>{e.exports=n.p+"3d328df32ee5e90706b6.png"},60:(e,t,n)=>{e.exports=n.p+"6e2f5ff1c39f8f122698.png"},737:(e,t,n)=>{e.exports=n.p+"e5aceff78ea544b02ece.png"},245:(e,t,n)=>{e.exports=n.p+"7e1f51864d694fc3f984.png"},183:(e,t,n)=>{e.exports=n.p+"e5cc9ca02bbcc06df2b3.png"},517:(e,t,n)=>{e.exports=n.p+"b997e08ae4e6c90ed484.png"},923:(e,t,n)=>{e.exports=n.p+"480df0598fa953a878bb.png"},268:(e,t,n)=>{e.exports=n.p+"88b192400d7bb86d91b0.png"},131:(e,t,n)=>{e.exports=n.p+"c50cc8375e71ea3741e1.png"},746:(e,t,n)=>{e.exports=n.p+"7266b467350ad44c62f7.png"}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={id:a,exports:{}};return e[a](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),a=n(795),i=n.n(a),r=n(569),o=n.n(r),s=n(565),d=n.n(s),l=n(216),c=n.n(l),A=n(589),u=n.n(A),m=n(426),p={};p.styleTagTransform=u(),p.setAttributes=d(),p.insert=o().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=c(),t()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var f=n(198),g={};function h(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function C(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function b(e){C(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function I(e){C(1,arguments);var t=b(e);return t.setHours(0,0,0,0),t}g.styleTagTransform=u(),g.setAttributes=d(),g.insert=o().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=c(),t()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var v=864e5;function x(e,t){C(2,arguments);var n=I(e),a=I(t),i=n.getTime()-h(n),r=a.getTime()-h(a);return Math.round((i-r)/v)}Math.pow(10,8);var B=36e5;function y(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function w(e,t){C(1,arguments);var n=t||{},a=null==n.additionalDigits?2:y(n.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var i,r=k(e);if(r.date){var o=E(r.date,a);i=P(o.restDateString,o.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var s,d=i.getTime(),l=0;if(r.time&&(l=T(r.time),isNaN(l)))return new Date(NaN);if(!r.timezone){var c=new Date(d+l),A=new Date(0);return A.setFullYear(c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()),A.setHours(c.getUTCHours(),c.getUTCMinutes(),c.getUTCSeconds(),c.getUTCMilliseconds()),A}return s=N(r.timezone),isNaN(s)?new Date(NaN):new Date(d+l+s)}var L={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},S=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,D=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,M=/^([+-])(\d{2})(?::?(\d{2}))?$/;function k(e){var t,n={},a=e.split(L.dateTimeDelimiter);if(a.length>2)return n;if(/:/.test(a[0])?t=a[0]:(n.date=a[0],t=a[1],L.timeZoneDelimiter.test(n.date)&&(n.date=e.split(L.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var i=L.timezone.exec(t);i?(n.time=t.replace(i[1],""),n.timezone=i[1]):n.time=t}return n}function E(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),a=e.match(n);if(!a)return{year:NaN,restDateString:""};var i=a[1]?parseInt(a[1]):null,r=a[2]?parseInt(a[2]):null;return{year:null===r?i:100*r,restDateString:e.slice((a[1]||a[2]).length)}}function P(e,t){if(null===t)return new Date(NaN);var n=e.match(S);if(!n)return new Date(NaN);var a=!!n[4],i=j(n[1]),r=j(n[2])-1,o=j(n[3]),s=j(n[4]),d=j(n[5])-1;if(a)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,d)?function(e,t,n){var a=new Date(0);a.setUTCFullYear(e,0,4);var i=7*(t-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+i),a}(t,s,d):new Date(NaN);var l=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(W[t]||(U(e)?29:28))}(t,r,o)&&function(e,t){return t>=1&&t<=(U(e)?366:365)}(t,i)?(l.setUTCFullYear(t,r,Math.max(i,o)),l):new Date(NaN)}function j(e){return e?parseInt(e):1}function T(e){var t=e.match(D);if(!t)return NaN;var n=F(t[1]),a=F(t[2]),i=F(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,a,i)?n*B+6e4*a+1e3*i:NaN}function F(e){return e&&parseFloat(e.replace(",","."))||0}function N(e){if("Z"===e)return 0;var t=e.match(M);if(!t)return 0;var n="+"===t[1]?-1:1,a=parseInt(t[2]),i=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,i)?n*(a*B+6e4*i):NaN}var W=[31,null,31,30,31,30,31,31,30,31,30,31];function U(e){return e%400==0||e%4==0&&e%100!=0}function q(e,t){C(2,arguments);var n=b(e),a=b(t),i=n.getTime()-a.getTime();return i<0?-1:i>0?1:i}function O(e,t){C(2,arguments);var n=b(e),a=b(t),i=n.getFullYear()-a.getFullYear(),r=n.getMonth()-a.getMonth();return 12*i+r}function H(e){C(1,arguments);var t=b(e);return t.setHours(23,59,59,999),t}function Y(e){C(1,arguments);var t=b(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function z(e){C(1,arguments);var t=b(e);return H(t).getTime()===Y(t).getTime()}function X(e,t){C(2,arguments);var n,a=b(e),i=b(t),r=q(a,i),o=Math.abs(O(a,i));if(o<1)n=0;else{1===a.getMonth()&&a.getDate()>27&&a.setDate(30),a.setMonth(a.getMonth()-r*o);var s=q(a,i)===-r;z(b(e))&&1===o&&1===q(e,i)&&(s=!1),n=r*(o-Number(s))}return 0===n?0:n}function R(e,t){return C(2,arguments),b(e).getTime()-b(t).getTime()}var V={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function Z(e){return e?V[e]:V.trunc}function G(e,t,n){C(2,arguments);var a=R(e,t)/1e3;return Z(null==n?void 0:n.roundingMethod)(a)}var J={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function $(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}const Q={date:$({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:$({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:$({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var K={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function _(e){return function(t,n){var a,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=i.width?String(i.width):r;a=e.formattingValues[o]||e.formattingValues[r]}else{var s=e.defaultWidth,d=i.width?String(i.width):e.defaultWidth;a=e.values[d]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}const ee={ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:_({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:_({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:_({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:_({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:_({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function te(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=t.match(i);if(!r)return null;var o,s=r[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(d)?ae(d,(function(e){return e.test(s)})):ne(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(l):l,o=n.valueCallback?n.valueCallback(o):o;var c=t.slice(s.length);return{value:o,rest:c}}}function ne(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function ae(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var ie,re={ordinalNumber:(ie={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(ie.matchPattern);if(!n)return null;var a=n[0],i=e.match(ie.parsePattern);if(!i)return null;var r=ie.valueCallback?ie.valueCallback(i[0]):i[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(a.length);return{value:r,rest:o}}),era:te({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:te({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:te({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:te({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:te({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const oe={code:"en-US",formatDistance:function(e,t,n){var a,i=J[e];return a="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:Q,formatRelative:function(e,t,n,a){return K[e]},localize:ee,match:re,options:{weekStartsOn:0,firstWeekContainsDate:1}};function se(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var de=1440,le=43200;function ce(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};C(2,arguments);var a=n.locale||oe;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var i=q(e,t);if(isNaN(i))throw new RangeError("Invalid time value");var r,o,s=se(n);s.addSuffix=Boolean(n.addSuffix),s.comparison=i,i>0?(r=b(t),o=b(e)):(r=b(e),o=b(t));var d,l=G(o,r),c=(h(o)-h(r))/1e3,A=Math.round((l-c)/60);if(A<2)return n.includeSeconds?l<5?a.formatDistance("lessThanXSeconds",5,s):l<10?a.formatDistance("lessThanXSeconds",10,s):l<20?a.formatDistance("lessThanXSeconds",20,s):l<40?a.formatDistance("halfAMinute",null,s):l<60?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",1,s):0===A?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",A,s);if(A<45)return a.formatDistance("xMinutes",A,s);if(A<90)return a.formatDistance("aboutXHours",1,s);if(A<de){var u=Math.round(A/60);return a.formatDistance("aboutXHours",u,s)}if(A<2520)return a.formatDistance("xDays",1,s);if(A<le){var m=Math.round(A/de);return a.formatDistance("xDays",m,s)}if(A<86400)return d=Math.round(A/le),a.formatDistance("aboutXMonths",d,s);if((d=X(o,r))<12){var p=Math.round(A/le);return a.formatDistance("xMonths",p,s)}var f=d%12,g=Math.floor(d/12);return f<3?a.formatDistance("aboutXYears",g,s):f<9?a.formatDistance("overXYears",g,s):a.formatDistance("almostXYears",g+1,s)}function Ae(e,t){return C(1,arguments),ce(e,Date.now(),t)}function ue(){const e=me(),t=e=>{localStorage.setItem(e.ID,JSON.stringify(e))};return{findNextListID:()=>{const e=Object.keys(localStorage);let t=0;return e.length>0&&(t=e.reduce((function(e,t){return Math.max(e,t)}),-1/0)+1),t},addListItemToDB:t,getListItemDetails:(e,t)=>{let n=[];const a=Object.keys(localStorage);for(let e in a){const t=JSON.parse(localStorage.getItem(a[e]));null!=t&&n.push(t)}if("isParent"==e)return n.filter((function(e){return"parent"==e.parentList}));if("get1Item"==e&&t>-1)return n.find((e=>e.ID==t));if("getListItemChildren"==e){const e=n.filter((function(e){return e.parentList==t}));return e.sort((function(e,t){let n=0;const a=new Date;let i=x(w(e.dueDate),a),r=x(w(t.dueDate),a);return isNaN(i)&&(n+=-100),i>r&&(n+=-1),i<r&&(n+=1),n})),e}return"uncommitted"==e?n.filter((function(e){return 0==e.committed})):void 0},createListObjectFromStorage:t=>e.newListItem(t.ID,t.title,t.dueDate,t.importance,t.pinned,t.parentList,t.selected,t.committed,t.completed),addStateSelected:e=>{e.selected=!0,t(e)},removeStateSelected:e=>{e.selected=!1,t(e)},daysUntilDue:e=>{const t=w(e.dueDate);let n={};if(""==e.dueDate&&(n.daysUntilDue="0",n.daysUntilDueWords="Set a due date..."),""!=e.dueDate){const e=x(t,new Date);e<0?(n.daysUntilDue="-1",n.daysUntilDueWords=`Due ${Ae(t,{addSuffix:!0})}`):(n.daysUntilDue=e,n.daysUntilDueWords=`Due ${Ae(t,{addSuffix:!0})}`)}return n},deleteThisObjectFromDB:e=>{localStorage.removeItem(e.ID)}}}function me(){return{newListItem:(e,t,n,a,i,r,o,s,d)=>{const l=ue(),c=Le();isNaN(e)&&(e=l.findNextListID());const A={ID:e,title:t,dueDate:n,importance:a,pinned:i,parentList:r,selected:o,committed:s,committed:s,completed:d,completed:d,addItemtoDB(){l.addListItemToDB(A)},selectedStateAdd(){l.addStateSelected(A)},selectedStateRemove(){l.removeStateSelected(A)},displayChildList(){c.displayListItemChildren(A)},daysLeftToDue:()=>l.daysUntilDue(A),deleteFromDB(){l.deleteThisObjectFromDB(A)}};return A}}}var pe=n(60),fe=n(737),ge=n(923),he=n(245),Ce=n(360),be=n(517),Ie=n(183),ve=n(200),xe=n(268),Be=n(131),ye=n(646),we=n(746);function Le(){const e=ue(),t=me(),n=function(){const e=ue();return{createForm:(t,n,a)=>{document.querySelectorAll(".modalFormContainer").forEach((e=>e.remove()));const i=document.querySelector(".mainContainerDiv"),r=document.createElement("div");r.classList.add("modalFormContainer"),i.appendChild(r);const o=document.createElement("form");o.classList.add("formModalListItemEdit"),o.setAttribute("name","modalForm"),o.setAttribute("data-parentList",NaN),o.setAttribute("data-itemID",NaN),o.setAttribute("method","post"),o.setAttribute("action","#"),r.appendChild(o);const s=document.createElement("label");s.setAttribute("for","title"),s.textContent="Note (required)",o.appendChild(s);const d=document.createElement("input");d.setAttribute("type","text"),d.required=!0,d.classList.add("listFormTitle"),d.setAttribute("id","title"),d.setAttribute("name","title"),d.value="n/a",o.appendChild(d),"title"==n&&d.focus();const l=document.createElement("label");l.setAttribute("for","dueDate"),l.textContent="Due Date (optional)",o.appendChild(l),"date"==n&&l.focus();let c=document.createElement("input");c.setAttribute("type","date"),c.setAttribute("id","dueDate"),c.setAttribute("name","dueDate"),c.classList.add("listFormComponent"),c.classList.add("listFormDueDate"),c.setAttribute("value",""),o.appendChild(c);const A=document.createElement("div");A.classList.add("updateHasSavedMessageFormModal"),A.textContent="Saved",o.appendChild(A),o.addEventListener("input",(function(t){console.log(t.target.closest("form").dataset.itemid);const n=t.target.closest("form").dataset.itemid,a=e.getListItemDetails("get1Item",n),i=e.createListObjectFromStorage(a);i.title=d.value,i.dueDate=c.value,i.committed=!0,console.table(i),i.addItemtoDB(i),A.classList.add("updateHasSavedMessageFormModalShow"),o.classList.add("formModalListItemEditSaved")})),A.addEventListener("transitionend",(function(e){console.log(e.target.classList),e.target.classList.remove("updateHasSavedMessageFormModalShow"),o.classList.remove("formModalListItemEditSaved")})),r.addEventListener("submit",(e=>{e.preventDefault()})),r.addEventListener("click",(e=>{1==!e.target.closest(".formModalListItemEdit")&&u()})),window.addEventListener("keydown",(function(e){"Escape"==e.key&&u()}));const u=()=>{const t=document.querySelector(".formModalListItemEdit").dataset.itemid;console.log(t);const n=e.getListItemDetails("get1Item",t),a=e.createListObjectFromStorage(n);console.log(a);const i=e.getListItemDetails("get1Item",a.parentList);e.createListObjectFromStorage(i).displayChildList(),r.classList.remove("formContainerVisible")}},updateInputValues:e=>{const t=document.querySelector(".formModalListItemEdit");console.log(t);const n=document.querySelector(".listFormTitle"),a=document.querySelector(".listFormDueDate");console.log(n),n.value=e.title,console.log(e.title),a.value=e.dueDate,t.setAttribute("data-parentList",e.parentList),t.setAttribute("data-itemID",e.ID)},showForm:()=>{document.querySelector(".modalFormContainer").classList.add("formContainerVisible")}}}(),a=()=>{const e=document.querySelector(".mainPageListContent"),t=document.createElement("div");t.classList.add("contentBreakPoint"),t.classList.add("mainPageListContentNewItem"),e.appendChild(t);const n=document.createElement("div");n.classList.add("breakPointHeading"),t.appendChild(n);const a=new Image;a.classList.add("contentBreakPointImg"),a.alt="New",a.src=he,n.appendChild(a);const i=document.createElement("h2");i.textContent="New",i.classList.add("breakPointHeadingText"),n.appendChild(i);const r=document.createElement("div");r.classList.add("contentBreakPoint"),r.classList.add("mainPageListContentOverdue"),e.appendChild(r);const o=document.createElement("div");o.classList.add("breakPointHeading"),r.appendChild(o);const s=new Image;s.classList.add("contentBreakPointImg"),s.alt="Overdue",s.src=ge,o.appendChild(s);const d=document.createElement("h2");d.textContent="Overdue",d.classList.add("breakPointHeading"),o.appendChild(d);const l=document.createElement("div");l.classList.add("contentBreakPoint"),l.classList.add("mainPageListContentNextWeek"),e.appendChild(l);const c=document.createElement("div");c.classList.add("breakPointHeading"),l.appendChild(c);const A=new Image;A.classList.add("contentBreakPointImg"),A.alt="Due this week",A.src=Ce,c.appendChild(A);const u=document.createElement("h2");u.textContent="In the next week",u.classList.add("breakPointHeading"),c.appendChild(u);const m=document.createElement("div");m.classList.add("contentBreakPoint"),m.classList.add("mainPageListContentAfterNextWeek"),e.appendChild(m);const p=document.createElement("div");p.classList.add("breakPointHeading"),m.appendChild(p);const f=new Image;f.classList.add("contentBreakPointImg"),f.alt="Due over a week away",f.src=be,p.appendChild(f);const g=document.createElement("h2");g.textContent="More than a week away",g.classList.add("breakPointHeading"),p.appendChild(g);const h=document.createElement("div");h.classList.add("contentBreakPoint"),h.classList.add("mainPageListContentNoDateSet"),e.appendChild(h);const C=document.createElement("div");C.classList.add("breakPointHeading"),h.appendChild(C);const b=new Image;b.classList.add("contentBreakPointImg"),b.alt="Due over a week away",b.src=Ie,C.appendChild(b);const I=document.createElement("h2");I.textContent="No due date",I.classList.add("breakPointHeading"),C.appendChild(I);const v=document.createElement("div");v.classList.add("contentBreakPoint"),v.classList.add("mainPageListContentComplete"),e.appendChild(v);const x=document.createElement("div");x.classList.add("breakPointHeading"),v.appendChild(x);const B=new Image;B.classList.add("contentBreakPointImg"),B.alt="Due over a week away",B.src=ve,x.appendChild(B);const y=document.createElement("h2");y.textContent="Completed",y.classList.add("breakPointHeading"),x.appendChild(y)},i=e=>{const n=t.newListItem(NaN,"","",1,!1,e,!1,!1,!1);n.addItemtoDB(),o(n).querySelector("input").focus()},r=e=>{e.classList.contains("contentBreakPointShow")||e.classList.add("contentBreakPointShow")},o=t=>{const a=t.daysLeftToDue();let i=document.querySelector(".mainPageListContent");1==t.completed?(i=document.querySelector(".mainPageListContentComplete"),r(i)):0==t.committed?(i=document.querySelector(".mainPageListContentNewItem"),r(i)):a.daysUntilDue<0?(i=document.querySelector(".mainPageListContentOverdue"),r(i)):a.daysUntilDue>0&&a.daysUntilDue<=7?(i=document.querySelector(".mainPageListContentNextWeek"),r(i)):a.daysUntilDue>7?(i=document.querySelector(".mainPageListContentAfterNextWeek"),r(i)):0==a.daysUntilDue&&(i=document.querySelector(".mainPageListContentNoDateSet"),r(i));const o=document.createElement("div");o.classList.add("mainPageListItemCard"),i.insertBefore(o,i.firstChild),(e=>{const t=e.querySelector(".breakPointHeading");e.insertBefore(t,e.firstChild)})(i);const d=document.createElement("div");d.classList.add("mainPageListItemContentLeft"),o.appendChild(d);let l=document.createElement("form");l.classList.add("mainPageListItemForm"),l.setAttribute("data-parentList",t.parentList),l.setAttribute("data-itemid",t.ID),l.setAttribute("method","post"),l.setAttribute("action","#"),d.appendChild(l),l.addEventListener("submit",(e=>{e.preventDefault()}));let c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("name","List Item Title"),c.classList.add("listFormComponent"),c.classList.add("listFormTitleText"),""==t.title?c.placeholder=t.title:c.value=t.title,l.appendChild(c);let A=document.createElement("p");A.textContent=`${a.daysUntilDueWords}`,A.classList.add("listFormComponent"),A.classList.add("formDisplayDueDate"),d.appendChild(A);const u=document.createElement("div");u.classList.add("mainPageListItemContentRight"),o.appendChild(u);const m=new Image;1==t.completed?m.src=ye:m.src=we,m.classList.add("checkBoxImgEle"),m.alt="Checkbox: Mark this entry as complete",u.appendChild(m),m.addEventListener("click",(function(n){n.target.closest(".mainPageListItemCard"),document.querySelector(".mainPageListContentComplete"),t.completed=!t.completed,t.addItemtoDB();const a=e.getListItemDetails("get1Item",t.parentList);e.createListObjectFromStorage(a).displayChildList()}));const p=new Image;p.src=xe,p.classList.add("pencilImgEle"),p.alt="Pencil: Edit this entry",u.appendChild(p);const f=new Image;f.src=Be,f.alt="Bin: Delete this entry",f.classList.add("trashImgEle"),u.appendChild(f);const g=document.createElement("p");return g.classList.add("updateHasSavedMessage"),g.textContent="Saved",g.setAttribute("data-savedtag",t.ID),u.appendChild(g),c.addEventListener("input",(function(e){t.title=e.target.value,t.committed=!0,t.addItemtoDB(t);const n=document.querySelector(`p[data-savedtag="${t.ID}"]`);n.classList.add("updateHasSavedMessageShow"),n.addEventListener("transitionend",(function(e){n.classList.remove("updateHasSavedMessageShow")}))})),o.addEventListener("click",(function(e){e.target.classList.contains("formDisplayDeleteItem")||s(e.target.closest(".mainPageListItemCard"))})),f.addEventListener("click",(function(e){const n=e.target.closest(".mainPageListItemCard");console.log(t.title),1==confirm(`Delete: \n\nTitle: ${t.title}`)&&(n.remove(),t.deleteFromDB())})),o.addEventListener("mouseenter",(e=>{e.target.classList.add("mainPageListItemCardMouseInside")})),o.addEventListener("mouseleave",(e=>{e.target.classList.remove("mainPageListItemCardMouseInside")})),A.addEventListener("click",(function(e){n.updateInputValues(t),n.showForm(t)})),p.addEventListener("click",(function(e){n.updateInputValues(t),n.showForm(t)})),1==t.selected&&s(o),l},s=t=>{document.querySelectorAll(".mainPageListItemCardActive").forEach((t=>{t.classList.remove("mainPageListItemCardActive");const n=t.querySelector(".mainPageListItemForm").dataset.itemid,a=e.getListItemDetails("get1Item",n),i=e.createListObjectFromStorage(a);i.selected=!1,i.addItemtoDB()}));const n=t.querySelector(".mainPageListItemForm").dataset.itemid,a=e.getListItemDetails("get1Item",n),i=e.createListObjectFromStorage(a);i.selected=!0,i.addItemtoDB(),t.classList.add("mainPageListItemCardActive")},d=e=>{const t=document.querySelector(".leftMenuProjectItemList"),n=document.createElement("button");n.classList.add("leftMenuProjectItem"),n.setAttribute("data-listitemid",e.ID),t.insertBefore(n,t.firstChild);const a=new Image;a.classList.add("ListImgEle"),a.alt="list icon",a.src=pe,a.setAttribute("data-listitemid",e.ID),n.appendChild(a);const i=document.createElement("p");return i.classList.add("leftMenuProjectItemText"),i.textContent=e.title+" ("+e.ID+")",i.setAttribute("data-listitemid",e.ID),n.appendChild(i),n.addEventListener("click",(function(e){c(e.target)})),n},l=(t,n,a)=>{const i=document.querySelectorAll(".leftMenuItemShowAsSelected");if(null!=i&&0==a)for(let t=0;t<i.length;t++){const n=e.getListItemDetails("get1Item",i[t].dataset.listitemid);e.createListObjectFromStorage(n).selectedStateRemove(),i[t].classList.remove("leftMenuItemShowAsSelected")}const r=t.closest("button");1==n.selected&&r.classList.add("leftMenuItemShowAsSelected")},c=t=>{const n=e.getListItemDetails("get1Item",t.dataset.listitemid),a=e.createListObjectFromStorage(n);1!=a.selected&&(a.selectedStateAdd(),l(t,a,!1),a.displayChildList(),A())},A=()=>{const t=e.getListItemDetails("uncommitted");for(let n=0;n<t.length;n++)e.createListObjectFromStorage(t[n]).deleteFromDB()},u=()=>{document.querySelector(".burgerFlyOut").classList.toggle("burgerFlyOutHide"),document.querySelector(".navAddNewItem").classList.toggle("navAddNewItemLeftMenuOut"),document.querySelector(".leftMenu").classList.toggle("leftMenuFlyOut"),document.querySelector(".leftMenuProjectItemList").classList.toggle("leftMenuProjectItemListShow")};return{initialSetUp:()=>{const t=document.createElement("div");t.classList.add("content"),document.querySelector("body").appendChild(t);const i=document.createElement("section");i.classList.add("mainContainerDiv"),t.appendChild(i);const r=document.createElement("nav");r.classList.add("leftMenu"),i.appendChild(r);const o=new Image;o.classList.add("burgerFlyOut"),o.alt="Show Menu",o.src=fe,r.appendChild(o);const s=document.createElement("button");s.textContent="New List ++",s.classList.add("navAddNewItem"),r.appendChild(s);const c=document.createElement("nav");c.classList.add("leftMenuProjectItemList"),r.appendChild(c);const A=document.createElement("div");A.classList.add("mainPageListContainer"),i.appendChild(A);const u=document.createElement("div");u.classList.add("mainPageListContentNavBar"),A.appendChild(u);const m=document.createElement("div");m.classList.add("mainPageListContent"),A.appendChild(m),a();const p=e.getListItemDetails("isParent",null);for(let t=0;t<p.length;t++){const n=e.createListObjectFromStorage(p[t]),a=d(n);l(a,n,!0),1==n.selected&&n.displayChildList()}n.createForm()},initialEventListeners:()=>{const e=document.querySelector(".leftMenu");e.addEventListener("mouseenter",u),e.addEventListener("mouseleave",u),document.querySelectorAll(".leftMenuProjectItem").forEach((e=>e.addEventListener("click",(function(e){c(e.target)})))),document.querySelector(".navAddNewItem").addEventListener("click",(function(e){A();const n=prompt("what is the title?");if(null!=n){const e=t.newListItem(NaN,n,"",1,!1,"parent",!0,!0,!1);console.table(e),e.addItemtoDB(e);const a=d(e);l(a,e,!1),e.displayChildList(),i(e.ID)}}))},addListItemToMenu:d,displayListItemChildren:t=>{const n=e.getListItemDetails("getListItemChildren",t.ID),r=document.querySelector(".mainPageListContent");for(;r.firstChild;)r.removeChild(r.firstChild);a();const s=document.querySelector(".listTitle");null!=s&&s.remove();const d=document.querySelector(".mainPageListContentNavBar"),l=t.title,c=document.createElement("h2");if(c.classList.add("listTitle"),c.textContent=l,d.appendChild(c),1==t.selected){for(let t in n){const a=e.createListObjectFromStorage(n[t]);o(a)}const a=document.querySelector(".buttonAddAnotherMainPageListItem");null!=a&&a.remove();const r=document.createElement("button");r.classList.add("buttonAddAnotherMainPageListItem"),r.textContent="+ Add item",d.appendChild(r),r.addEventListener("click",(function(e){i(t.ID)}))}}}}me();const Se=Le();Se.initialSetUp(),Se.initialEventListeners()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,