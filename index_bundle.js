(()=>{"use strict";var e={681:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(537),i=n.n(a),r=n(645),o=n.n(r)()(i());o.push([e.id,"\n.listModalFormContainer {\n    display: flex;\n    justify-content: center;    \n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color:rgba(36, 36, 36, 0.9);   \n    transform: translate(0vw, -100vh);\n    pointer-events: none;\n    transition: 0.4s;\n}\n.listFormContainerVisible {\n    transform: translate(0vw, 0vh);\n    pointer-events: all;\n}\n\n\n.listFormModalListItemEdit {\ndisplay: flex;\nflex-direction: column;\nposition: fixed;\ntop: 20%;\nborder: 5px solid #ffffff;\nbackground: rgb(216, 215, 215);\nborder-radius: 5px;\ncolor: black;\nmin-width: 250px;\nheight: 200px;\ntransition: border 2s;\n}\n\n.listFormModalLabel {\n    display: flex;\n    font-size: 0.8rem;\n    font-weight: bold;\n    margin: 10px 10px 0px 10px;\n}\n\n.listFormModalInput {\n    display: flex;\n    margin: 3px 10px 0px 10px;\n}\n\n.listFormModalDoneButton {\n    display: flex;\n    align-self: center;\n    align-items: center;\n    justify-content: center;\n    margin-top: 10px;\n    width: 150px;   \n}\n\n.listUpdateHasSavedMessageFormModal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-self: center;\n    margin-top: 10px;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    opacity: 0;\n    width:100px;\n    transition: 3s;\n}\n\n.listUpdateHasSavedMessageFormModalShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.listFormModalListItemEditSaved {\n    border: 5px solid #30db05;\n}","",{version:3,sources:["webpack://./src/listFormModalStyle.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,sCAAsC;IACtC,iCAAiC;IACjC,oBAAoB;IACpB,gBAAgB;AACpB;AACA;IACI,8BAA8B;IAC9B,mBAAmB;AACvB;;;AAGA;AACA,aAAa;AACb,sBAAsB;AACtB,eAAe;AACf,QAAQ;AACR,yBAAyB;AACzB,8BAA8B;AAC9B,kBAAkB;AAClB,YAAY;AACZ,gBAAgB;AAChB,aAAa;AACb,qBAAqB;AACrB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,iBAAiB;IACjB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;IAChB,kCAAkC;IAClC,yBAAyB;IACzB,kBAAkB;IAClB,wBAAwB;IACxB,WAAW;IACX,UAAU;IACV,WAAW;IACX,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,UAAU;;AAEd;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["\n.listModalFormContainer {\n    display: flex;\n    justify-content: center;    \n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color:rgba(36, 36, 36, 0.9);   \n    transform: translate(0vw, -100vh);\n    pointer-events: none;\n    transition: 0.4s;\n}\n.listFormContainerVisible {\n    transform: translate(0vw, 0vh);\n    pointer-events: all;\n}\n\n\n.listFormModalListItemEdit {\ndisplay: flex;\nflex-direction: column;\nposition: fixed;\ntop: 20%;\nborder: 5px solid #ffffff;\nbackground: rgb(216, 215, 215);\nborder-radius: 5px;\ncolor: black;\nmin-width: 250px;\nheight: 200px;\ntransition: border 2s;\n}\n\n.listFormModalLabel {\n    display: flex;\n    font-size: 0.8rem;\n    font-weight: bold;\n    margin: 10px 10px 0px 10px;\n}\n\n.listFormModalInput {\n    display: flex;\n    margin: 3px 10px 0px 10px;\n}\n\n.listFormModalDoneButton {\n    display: flex;\n    align-self: center;\n    align-items: center;\n    justify-content: center;\n    margin-top: 10px;\n    width: 150px;   \n}\n\n.listUpdateHasSavedMessageFormModal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-self: center;\n    margin-top: 10px;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    opacity: 0;\n    width:100px;\n    transition: 3s;\n}\n\n.listUpdateHasSavedMessageFormModalShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.listFormModalListItemEditSaved {\n    border: 5px solid #30db05;\n}"],sourceRoot:""}]);const s=o},426:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(537),i=n.n(a),r=n(645),o=n.n(r)()(i());o.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n\nbody {\n    background-color: rgb(41, 41, 41);\n    color: white;\n}\n\n.nav {\n    display: flex;\n    justify-content: space-between;\n}\n\n.logoContainer {\n    display: flex;\n    flex-direction: row;\n    gap: 15px;\n}\n\n.navTitle {\n    display: flex;\n}\n\n.updateHasSavedMessage {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    width:140px;\n    opacity: 0;\n    z-index: -1;\n    transition: 2s;\n    position: fixed;\n    right: 0;\n}\n.updateHasSavedMessageShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.navAddNewItem {\n    display: flex;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    height: 30px;\n    width:150px;\n    border-radius: 3px;\n    border: 1px solid rgb(86, 87, 86);\n    background-color: rgb(22, 186, 30);\n    color: rgb(255, 255, 255);\n    margin: 0px 0px 5px 5px;\n    transition: 0.5s;\n}\n.navAddNewItem:hover {\n    border-width: 2px;\n}\n\n.navAddNewItemLeftMenuOut {\n    margin-top: 0px;\n}\n\n.mainContainerDiv {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n\n.leftMenu {\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    position: fixed;\n    top: 0;\n    left: 0;\n    overflow: none;\n    width: 50px;\n    height: 100vh;\n    background-color: rgb(118, 118, 115);\n    transition: 1s;\n}\n\n\n.leftMenuFlyOut {\n    width: 200px;\n    background-color: rgb(230, 230, 230);\n    overflow: auto;\n}\n.leftMenuFlyOut::-webkit-scrollbar {\n    width: 10px;\n    background: #f1f1f1; \n}\n.leftMenuFlyOut::-webkit-scrollbar-track {\n    background: #5c5959; \n}\n.leftMenuFlyOut::-webkit-scrollbar-thumb {\n    background: rgb(77, 76, 76); \n}\n  .leftMenuFlyOut::-webkit-scrollbar-thumb:hover {\n    background: rgb(225, 222, 222); \n}\n\n.burgerFlyOutButton {\n\n    align-self: center;\n    border: 0px;\n    background-color:rgba(0, 0, 0, 0);\n    margin-top: 10px;\n    transition: 0.5s;\n    cursor: pointer;   \n}\n.burgerFlyOut {\n    display: flex;\n    width:30px;\n    align-self: center;\n    transition: 0.5s;\n    \n    cursor: pointer;\n}\n.burgerFlyOutButtonHide {\n    width: 0px;\n    height:0px;\n    transform: translate(-100vw, 0vh);\n}\n\n\n.leftMenuProjectItemList {\n    list-style-type: none;\n    padding-left: 0px;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n}\n\n.leftMenuProjectItemListShow {\n    transform: translate(0vw, 0vh);   \n}\n\n.leftMenuProjectItem {\n    display: flex;\n    align-items: center;\n    text-align: left;\n    width:180px;\n    border: 1px solid rgb(152, 152, 152);\n    background-color: rgb(43, 42, 42);\n    color: rgb(255, 255, 255);\n    border-radius: 0px 6px 6px 0px;\n    margin-top: 1px;\n    padding: 5px;\n    cursor: pointer;\n    margin-top: 3px;\n}\n\n.leftMenuProjectItem:hover {\n    background-color: rgb(22, 186, 30);\n}\n\n.ListImgEle {\n    width:20px;\n    height: 20px;\n    margin-right: 5px;\n}\n\n.leftMenuProjectItemText {\n    font-size: 1rem;\n}\n\n.leftMenuItemShowAsSelected {\n    background-color: rgb(5, 121, 11);\n    border: 1px solid rgb(75, 75, 75);\n    color: white;\n\n}\n\n.mainPageListContainer {\n    margin-left: 100px;\n    height: 100vh;\n}\n\n.mainPageListContentNavBar {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding-top:10px;\n    gap: 3px;\n    font-weight: bold;\n}\n\n.listTitle {\n    color: white;\n    font-weight: bold;\n    font-size: 1.3rem;\n}\n\n.buttonAddAnotherMainPageListItem {\n    display: flex;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    height: 30px;\n    width:100px;\n    border-radius: 3px;\n    border: 1px solid rgb(191, 191, 191);\n    background-color: rgb(5, 121, 11);\n    color: white;\n    margin: 0px 0px 5px 5px;\n    transition: 0.5s;\n}\n.buttonAddAnotherMainPageListItem:hover {\n    border-color: white;\n    background-color: rgb(22, 186, 30);\n}\n\n.mainPageListContent {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    width:85vw;\n    overflow: auto;\n    padding: 10px;\n}\n\n.contentBreakPoint {\n    width: 80vw;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n    height:0px;\n}\n.contentBreakPointShow {\n    border: 1px solid rgb(147, 147, 145);\n    border-radius: 3px;\n    margin-top: 2vh;\n    transform: translate(0vw, 0vh);\n    height:100%;\n}\n.contentBreakPointImg {\n    width:23px;\n}\n\n.breakPointHeading {\n    display: flex; \n    align-items: center;\n    gap: 4px;\n    font-weight: bold;\n    padding: 5px;\n}\n\n.mainPageListItemCard {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n    padding-bottom: 10px;\n    padding-top: 10px;\n    width: 100%;\n    border-bottom: 1px solid rgb(99, 97, 97);\n    transition: 0.2s;\n}\n\n.mainPageListItemCardMouseInside {\n    background-color: #5c5959;\n    cursor: pointer;\n}\n\n.mainPageListItemCardActive {\n    /* border: 1px solid white; */\n    background-color: #5c5959;\n    border-radius: 3px;\n}\n\n.mainPageListItemContentLeft {\n    display: flex;\n    flex-direction: column;\n}\n\n.mainPageListItemContentRight {\n    display: flex;\n    margin-right: 10px;\n}\n\n.formDisplayDueDate {\n    margin-left: 25px;\n    font-size: 0.8rem;\n    color: #b6acac;\n    background-color: rgba(0, 0, 0, 0);\n    border: 0;\n    text-align: left;\n    opacity: 0;\n    transform: 1.5s;\n}\n\n.formDisplayDueDateShow {\n    opacity: 1;\n}\n\n.formDisplayDueDateCompleted {\n    text-decoration: line-through;\n}\n\n.formDisplayDueDate:hover {\n    color: #b6acac;\n    text-decoration: underline;\n}\n\n.mainPageListItemForm {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.listFormTitleText {\n    border: 0px;\n    background-color:rgba(0, 0, 0, 0);\n    color: white;\n    resize: none;\n    margin-left: 4px;\n    width: 60vw;\n    height: 1.2rem;\n}\n\n.listFormTitleText:hover{\n    border-left: 2px dotted white;\n}\n\n.listFormTitleText:focus{\n    outline: none;\n    border-left: 2px dotted white;\n}\n\n.listFormActionButton {\n    background-color: rgba(0, 0, 0, 0);\n    padding:0px;\n    border: 0;\n    cursor: pointer;\n}\n.listFormActionButton:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n.checkBoxImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n}\n\n.pencilImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n}\n\n.trashImgEle {\n    width:28px;\n    margin: 0px 4px 0px 4px;\n}\n\n\n@keyframes showActive {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(20deg) scale(1.35); }\n    75% { transform: rotate(-20deg) scale(1.35); }\n    100% { transform: rotate(00deg);}\n  }\n\n\n\n@media (max-width: 610px) {\n    .mainPageListItemContentLeft {\n        width:100%;\n    }\n    \n    .mainPageListItemContentRight {\n        justify-content: flex-end;\n        width:100%;\n    }\n  \n  }","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n/* ------- end of CSS Reset ------------------------------------------------------------------- */\n\nbody {\n    background-color: rgb(41, 41, 41);\n    color: white;\n}\n\n.nav {\n    display: flex;\n    justify-content: space-between;\n}\n\n.logoContainer {\n    display: flex;\n    flex-direction: row;\n    gap: 15px;\n}\n\n.navTitle {\n    display: flex;\n}\n\n.updateHasSavedMessage {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border: 1px solid white;\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    width:140px;\n    opacity: 0;\n    z-index: -1;\n    transition: 2s;\n    position: fixed;\n    right: 0;\n}\n.updateHasSavedMessageShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.navAddNewItem {\n    display: flex;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    height: 30px;\n    width:150px;\n    border-radius: 3px;\n    border: 1px solid rgb(86, 87, 86);\n    background-color: rgb(22, 186, 30);\n    color: rgb(255, 255, 255);\n    margin: 0px 0px 5px 5px;\n    transition: 0.5s;\n}\n.navAddNewItem:hover {\n    border-width: 2px;\n}\n\n.navAddNewItemLeftMenuOut {\n    margin-top: 0px;\n}\n\n.mainContainerDiv {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n\n.leftMenu {\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    position: fixed;\n    top: 0;\n    left: 0;\n    overflow: none;\n    width: 50px;\n    height: 100vh;\n    background-color: rgb(118, 118, 115);\n    transition: 1s;\n}\n\n\n.leftMenuFlyOut {\n    width: 200px;\n    background-color: rgb(230, 230, 230);\n    overflow: auto;\n}\n.leftMenuFlyOut::-webkit-scrollbar {\n    width: 10px;\n    background: #f1f1f1; \n}\n.leftMenuFlyOut::-webkit-scrollbar-track {\n    background: #5c5959; \n}\n.leftMenuFlyOut::-webkit-scrollbar-thumb {\n    background: rgb(77, 76, 76); \n}\n  .leftMenuFlyOut::-webkit-scrollbar-thumb:hover {\n    background: rgb(225, 222, 222); \n}\n\n.burgerFlyOutButton {\n\n    align-self: center;\n    border: 0px;\n    background-color:rgba(0, 0, 0, 0);\n    margin-top: 10px;\n    transition: 0.5s;\n    cursor: pointer;   \n}\n.burgerFlyOut {\n    display: flex;\n    width:30px;\n    align-self: center;\n    transition: 0.5s;\n    \n    cursor: pointer;\n}\n.burgerFlyOutButtonHide {\n    width: 0px;\n    height:0px;\n    transform: translate(-100vw, 0vh);\n}\n\n\n.leftMenuProjectItemList {\n    list-style-type: none;\n    padding-left: 0px;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n}\n\n.leftMenuProjectItemListShow {\n    transform: translate(0vw, 0vh);   \n}\n\n.leftMenuProjectItem {\n    display: flex;\n    align-items: center;\n    text-align: left;\n    width:180px;\n    border: 1px solid rgb(152, 152, 152);\n    background-color: rgb(43, 42, 42);\n    color: rgb(255, 255, 255);\n    border-radius: 0px 6px 6px 0px;\n    margin-top: 1px;\n    padding: 5px;\n    cursor: pointer;\n    margin-top: 3px;\n}\n\n.leftMenuProjectItem:hover {\n    background-color: rgb(22, 186, 30);\n}\n\n.ListImgEle {\n    width:20px;\n    height: 20px;\n    margin-right: 5px;\n}\n\n.leftMenuProjectItemText {\n    font-size: 1rem;\n}\n\n.leftMenuItemShowAsSelected {\n    background-color: rgb(5, 121, 11);\n    border: 1px solid rgb(75, 75, 75);\n    color: white;\n\n}\n\n.mainPageListContainer {\n    margin-left: 100px;\n    height: 100vh;\n}\n\n.mainPageListContentNavBar {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding-top:10px;\n    gap: 3px;\n    font-weight: bold;\n}\n\n.listTitle {\n    color: white;\n    font-weight: bold;\n    font-size: 1.3rem;\n}\n\n.buttonAddAnotherMainPageListItem {\n    display: flex;\n    cursor: pointer;\n    justify-content: center;\n    align-items: center;\n    height: 30px;\n    width:100px;\n    border-radius: 3px;\n    border: 1px solid rgb(191, 191, 191);\n    background-color: rgb(5, 121, 11);\n    color: white;\n    margin: 0px 0px 5px 5px;\n    transition: 0.5s;\n}\n.buttonAddAnotherMainPageListItem:hover {\n    border-color: white;\n    background-color: rgb(22, 186, 30);\n}\n\n.mainPageListContent {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    width:85vw;\n    overflow: auto;\n    padding: 10px;\n}\n\n.contentBreakPoint {\n    width: 80vw;\n    transform: translate(-100vw, 0vh);   \n    transition: 0.5s;\n    height:0px;\n}\n.contentBreakPointShow {\n    border: 1px solid rgb(147, 147, 145);\n    border-radius: 3px;\n    margin-top: 2vh;\n    transform: translate(0vw, 0vh);\n    height:100%;\n}\n.contentBreakPointImg {\n    width:23px;\n}\n\n.breakPointHeading {\n    display: flex; \n    align-items: center;\n    gap: 4px;\n    font-weight: bold;\n    padding: 5px;\n}\n\n.mainPageListItemCard {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n    padding-bottom: 10px;\n    padding-top: 10px;\n    width: 100%;\n    border-bottom: 1px solid rgb(99, 97, 97);\n    transition: 0.2s;\n}\n\n.mainPageListItemCardMouseInside {\n    background-color: #5c5959;\n    cursor: pointer;\n}\n\n.mainPageListItemCardActive {\n    /* border: 1px solid white; */\n    background-color: #5c5959;\n    border-radius: 3px;\n}\n\n.mainPageListItemContentLeft {\n    display: flex;\n    flex-direction: column;\n}\n\n.mainPageListItemContentRight {\n    display: flex;\n    margin-right: 10px;\n}\n\n.formDisplayDueDate {\n    margin-left: 25px;\n    font-size: 0.8rem;\n    color: #b6acac;\n    background-color: rgba(0, 0, 0, 0);\n    border: 0;\n    text-align: left;\n    opacity: 0;\n    transform: 1.5s;\n}\n\n.formDisplayDueDateShow {\n    opacity: 1;\n}\n\n.formDisplayDueDateCompleted {\n    text-decoration: line-through;\n}\n\n.formDisplayDueDate:hover {\n    color: #b6acac;\n    text-decoration: underline;\n}\n\n.mainPageListItemForm {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n}\n\n\n.listFormTitleText {\n    border: 0px;\n    background-color:rgba(0, 0, 0, 0);\n    color: white;\n    resize: none;\n    margin-left: 4px;\n    width: 60vw;\n    height: 1.2rem;\n}\n\n.listFormTitleText:hover{\n    border-left: 2px dotted white;\n}\n\n.listFormTitleText:focus{\n    outline: none;\n    border-left: 2px dotted white;\n}\n\n.listFormActionButton {\n    background-color: rgba(0, 0, 0, 0);\n    padding:0px;\n    border: 0;\n    cursor: pointer;\n}\n.listFormActionButton:hover {\n    animation: showActive 2s;\n    animation-iteration-count: infinite;\n}\n.checkBoxImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n}\n\n.pencilImgEle {\n    width:25px;\n    margin: 0px 2px 0px 4px;\n}\n\n.trashImgEle {\n    width:28px;\n    margin: 0px 4px 0px 4px;\n}\n\n\n@keyframes showActive {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(20deg) scale(1.35); }\n    75% { transform: rotate(-20deg) scale(1.35); }\n    100% { transform: rotate(00deg);}\n  }\n\n\n\n@media (max-width: 610px) {\n    .mainPageListItemContentLeft {\n        width:100%;\n    }\n    \n    .mainPageListItemContentRight {\n        justify-content: flex-end;\n        width:100%;\n    }\n  \n  }"],sourceRoot:""}]);const s=o},413:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(537),i=n.n(a),r=n(645),o=n.n(r)()(i());o.push([e.id,"\n.modalFormContainer {\n    display: flex;\n    justify-content: center;    \n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color:rgba(36, 36, 36, 0.9);   \n    transform: translate(0vw, -100vh);\n    pointer-events: none;\n    transition: 0.4s;\n}\n.formContainerVisible {\n    visibility: visible;\n    transform: translate(0vw, 0vh);\n    pointer-events: all;\n}\n\n\n.formModalListItemEdit {\ndisplay: flex;\nflex-direction: column;\nposition: fixed;\ntop: 20%;\nborder: 5px solid #ffffff;\nbackground: rgb(216, 215, 215);\nborder-radius: 5px;\ncolor: black;\nmin-width: 250px;\nheight: 200px;\ntransition: border 2s;\n}\n\n.formModalLabel {\n    display: flex;\n    font-size: 0.8rem;\n    font-weight: bold;\n    margin: 10px 10px 0px 10px;\n}\n\n.formModalInput {\n    display: flex;\n    margin: 3px 10px 0px 10px;\n}\n\n.formModalDoneButton {\n    display: flex;\n    align-self: center;\n    align-items: center;\n    justify-content: center;\n    margin-top: 10px;\n    width: 150px;   \n}\n\n.updateHasSavedMessageFormModal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-self: center;\n    margin-top: 10px;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    opacity: 0;\n    width:100px;\n    transition: 3s;\n}\n\n.updateHasSavedMessageFormModalShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.formModalListItemEditSaved {\n    border: 5px solid #30db05;\n}","",{version:3,sources:["webpack://./src/taskFormModalStyle.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,sCAAsC;IACtC,iCAAiC;IACjC,oBAAoB;IACpB,gBAAgB;AACpB;AACA;IACI,mBAAmB;IACnB,8BAA8B;IAC9B,mBAAmB;AACvB;;;AAGA;AACA,aAAa;AACb,sBAAsB;AACtB,eAAe;AACf,QAAQ;AACR,yBAAyB;AACzB,8BAA8B;AAC9B,kBAAkB;AAClB,YAAY;AACZ,gBAAgB;AAChB,aAAa;AACb,qBAAqB;AACrB;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,iBAAiB;IACjB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;IAClB,gBAAgB;IAChB,kCAAkC;IAClC,yBAAyB;IACzB,kBAAkB;IAClB,wBAAwB;IACxB,WAAW;IACX,UAAU;IACV,WAAW;IACX,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,UAAU;;AAEd;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:["\n.modalFormContainer {\n    display: flex;\n    justify-content: center;    \n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color:rgba(36, 36, 36, 0.9);   \n    transform: translate(0vw, -100vh);\n    pointer-events: none;\n    transition: 0.4s;\n}\n.formContainerVisible {\n    visibility: visible;\n    transform: translate(0vw, 0vh);\n    pointer-events: all;\n}\n\n\n.formModalListItemEdit {\ndisplay: flex;\nflex-direction: column;\nposition: fixed;\ntop: 20%;\nborder: 5px solid #ffffff;\nbackground: rgb(216, 215, 215);\nborder-radius: 5px;\ncolor: black;\nmin-width: 250px;\nheight: 200px;\ntransition: border 2s;\n}\n\n.formModalLabel {\n    display: flex;\n    font-size: 0.8rem;\n    font-weight: bold;\n    margin: 10px 10px 0px 10px;\n}\n\n.formModalInput {\n    display: flex;\n    margin: 3px 10px 0px 10px;\n}\n\n.formModalDoneButton {\n    display: flex;\n    align-self: center;\n    align-items: center;\n    justify-content: center;\n    margin-top: 10px;\n    width: 150px;   \n}\n\n.updateHasSavedMessageFormModal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    align-self: center;\n    margin-top: 10px;\n    background-color: rgb(22, 186, 30);\n    color: rgb(249, 249, 249);\n    border-radius: 5px;\n    padding: 3px 3px 3px 3px;\n    height:20px;\n    opacity: 0;\n    width:100px;\n    transition: 3s;\n}\n\n.updateHasSavedMessageFormModalShow {\n    z-index: 1;\n    opacity: 1;\n    \n}\n\n.formModalListItemEditSaved {\n    border: 5px solid #30db05;\n}"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);a&&o[A[0]]||(void 0!==r&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=r),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),t.push(A))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var r={},o=[],s=0;s<e.length;s++){var d=e[s],l=a.base?d[0]+a.base:d[0],A=r[l]||0,c="".concat(l," ").concat(A);r[l]=A+1;var u=n(c),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var p=i(m,a);a.byIndex=s,t.splice(s,0,{identifier:c,updater:p,references:1})}o.push(c)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var r=a(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var s=n(r[o]);t[s].references--}for(var d=a(e,i),l=0;l<r.length;l++){var A=n(r[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}r=d}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,i&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},360:(e,t,n)=>{e.exports=n.p+"319a85031255c4db50c7.png"},646:(e,t,n)=>{e.exports=n.p+"33c217c8c748af0ac16b.png"},200:(e,t,n)=>{e.exports=n.p+"3d328df32ee5e90706b6.png"},60:(e,t,n)=>{e.exports=n.p+"6e2f5ff1c39f8f122698.png"},737:(e,t,n)=>{e.exports=n.p+"e5aceff78ea544b02ece.png"},245:(e,t,n)=>{e.exports=n.p+"7e1f51864d694fc3f984.png"},183:(e,t,n)=>{e.exports=n.p+"e5cc9ca02bbcc06df2b3.png"},517:(e,t,n)=>{e.exports=n.p+"b997e08ae4e6c90ed484.png"},923:(e,t,n)=>{e.exports=n.p+"480df0598fa953a878bb.png"},268:(e,t,n)=>{e.exports=n.p+"88b192400d7bb86d91b0.png"},131:(e,t,n)=>{e.exports=n.p+"c50cc8375e71ea3741e1.png"},746:(e,t,n)=>{e.exports=n.p+"7266b467350ad44c62f7.png"}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={id:a,exports:{}};return e[a](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),a=n(795),i=n.n(a),r=n(569),o=n.n(r),s=n(565),d=n.n(s),l=n(216),A=n.n(l),c=n(589),u=n.n(c),m=n(426),p={};p.styleTagTransform=u(),p.setAttributes=d(),p.insert=o().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=A(),t()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;var g=n(413),f={};f.styleTagTransform=u(),f.setAttributes=d(),f.insert=o().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=A(),t()(g.Z,f),g.Z&&g.Z.locals&&g.Z.locals;var C=n(681),h={};function I(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function b(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function B(e){b(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function x(e){b(1,arguments);var t=B(e);return t.setHours(0,0,0,0),t}h.styleTagTransform=u(),h.setAttributes=d(),h.insert=o().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=A(),t()(C.Z,h),C.Z&&C.Z.locals&&C.Z.locals;var v=864e5;function y(e,t){b(2,arguments);var n=x(e),a=x(t),i=n.getTime()-I(n),r=a.getTime()-I(a);return Math.round((i-r)/v)}Math.pow(10,8);var w=36e5;function L(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function M(e,t){b(1,arguments);var n=t||{},a=null==n.additionalDigits?2:L(n.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var i,r=P(e);if(r.date){var o=F(r.date,a);i=j(o.restDateString,o.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var s,d=i.getTime(),l=0;if(r.time&&(l=N(r.time),isNaN(l)))return new Date(NaN);if(!r.timezone){var A=new Date(d+l),c=new Date(0);return c.setFullYear(A.getUTCFullYear(),A.getUTCMonth(),A.getUTCDate()),c.setHours(A.getUTCHours(),A.getUTCMinutes(),A.getUTCSeconds(),A.getUTCMilliseconds()),c}return s=W(r.timezone),isNaN(s)?new Date(NaN):new Date(d+l+s)}var k={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},S=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,D=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,E=/^([+-])(\d{2})(?::?(\d{2}))?$/;function P(e){var t,n={},a=e.split(k.dateTimeDelimiter);if(a.length>2)return n;if(/:/.test(a[0])?t=a[0]:(n.date=a[0],t=a[1],k.timeZoneDelimiter.test(n.date)&&(n.date=e.split(k.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var i=k.timezone.exec(t);i?(n.time=t.replace(i[1],""),n.timezone=i[1]):n.time=t}return n}function F(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),a=e.match(n);if(!a)return{year:NaN,restDateString:""};var i=a[1]?parseInt(a[1]):null,r=a[2]?parseInt(a[2]):null;return{year:null===r?i:100*r,restDateString:e.slice((a[1]||a[2]).length)}}function j(e,t){if(null===t)return new Date(NaN);var n=e.match(S);if(!n)return new Date(NaN);var a=!!n[4],i=T(n[1]),r=T(n[2])-1,o=T(n[3]),s=T(n[4]),d=T(n[5])-1;if(a)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,d)?function(e,t,n){var a=new Date(0);a.setUTCFullYear(e,0,4);var i=7*(t-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+i),a}(t,s,d):new Date(NaN);var l=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(q[t]||(O(e)?29:28))}(t,r,o)&&function(e,t){return t>=1&&t<=(O(e)?366:365)}(t,i)?(l.setUTCFullYear(t,r,Math.max(i,o)),l):new Date(NaN)}function T(e){return e?parseInt(e):1}function N(e){var t=e.match(D);if(!t)return NaN;var n=U(t[1]),a=U(t[2]),i=U(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,a,i)?n*w+6e4*a+1e3*i:NaN}function U(e){return e&&parseFloat(e.replace(",","."))||0}function W(e){if("Z"===e)return 0;var t=e.match(E);if(!t)return 0;var n="+"===t[1]?-1:1,a=parseInt(t[2]),i=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,i)?n*(a*w+6e4*i):NaN}var q=[31,null,31,30,31,30,31,31,30,31,30,31];function O(e){return e%400==0||e%4==0&&e%100!=0}function H(e,t){b(2,arguments);var n=B(e),a=B(t),i=n.getTime()-a.getTime();return i<0?-1:i>0?1:i}function Y(e,t){b(2,arguments);var n=B(e),a=B(t),i=n.getFullYear()-a.getFullYear(),r=n.getMonth()-a.getMonth();return 12*i+r}function z(e){b(1,arguments);var t=B(e);return t.setHours(23,59,59,999),t}function X(e){b(1,arguments);var t=B(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function V(e){b(1,arguments);var t=B(e);return z(t).getTime()===X(t).getTime()}function R(e,t){b(2,arguments);var n,a=B(e),i=B(t),r=H(a,i),o=Math.abs(Y(a,i));if(o<1)n=0;else{1===a.getMonth()&&a.getDate()>27&&a.setDate(30),a.setMonth(a.getMonth()-r*o);var s=H(a,i)===-r;V(B(e))&&1===o&&1===H(e,i)&&(s=!1),n=r*(o-Number(s))}return 0===n?0:n}function Z(e,t){return b(2,arguments),B(e).getTime()-B(t).getTime()}var Q={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function G(e){return e?Q[e]:Q.trunc}function J(e,t,n){b(2,arguments);var a=Z(e,t)/1e3;return G(null==n?void 0:n.roundingMethod)(a)}var $={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function K(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}const _={date:K({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:K({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:K({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var ee={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function te(e){return function(t,n){var a,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=i.width?String(i.width):r;a=e.formattingValues[o]||e.formattingValues[r]}else{var s=e.defaultWidth,d=i.width?String(i.width):e.defaultWidth;a=e.values[d]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}const ne={ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:te({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:te({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:te({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:te({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:te({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ae(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=t.match(i);if(!r)return null;var o,s=r[0],d=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(d)?re(d,(function(e){return e.test(s)})):ie(d,(function(e){return e.test(s)}));o=e.valueCallback?e.valueCallback(l):l,o=n.valueCallback?n.valueCallback(o):o;var A=t.slice(s.length);return{value:o,rest:A}}}function ie(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function re(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var oe,se={ordinalNumber:(oe={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(oe.matchPattern);if(!n)return null;var a=n[0],i=e.match(oe.parsePattern);if(!i)return null;var r=oe.valueCallback?oe.valueCallback(i[0]):i[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(a.length);return{value:r,rest:o}}),era:ae({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ae({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ae({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ae({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ae({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const de={code:"en-US",formatDistance:function(e,t,n){var a,i=$[e];return a="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:_,formatRelative:function(e,t,n,a){return ee[e]},localize:ne,match:se,options:{weekStartsOn:0,firstWeekContainsDate:1}};function le(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var Ae=1440,ce=43200;function ue(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};b(2,arguments);var a=n.locale||de;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var i=H(e,t);if(isNaN(i))throw new RangeError("Invalid time value");var r,o,s=le(n);s.addSuffix=Boolean(n.addSuffix),s.comparison=i,i>0?(r=B(t),o=B(e)):(r=B(e),o=B(t));var d,l=J(o,r),A=(I(o)-I(r))/1e3,c=Math.round((l-A)/60);if(c<2)return n.includeSeconds?l<5?a.formatDistance("lessThanXSeconds",5,s):l<10?a.formatDistance("lessThanXSeconds",10,s):l<20?a.formatDistance("lessThanXSeconds",20,s):l<40?a.formatDistance("halfAMinute",null,s):l<60?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",1,s):0===c?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",c,s);if(c<45)return a.formatDistance("xMinutes",c,s);if(c<90)return a.formatDistance("aboutXHours",1,s);if(c<Ae){var u=Math.round(c/60);return a.formatDistance("aboutXHours",u,s)}if(c<2520)return a.formatDistance("xDays",1,s);if(c<ce){var m=Math.round(c/Ae);return a.formatDistance("xDays",m,s)}if(c<86400)return d=Math.round(c/ce),a.formatDistance("aboutXMonths",d,s);if((d=R(o,r))<12){var p=Math.round(c/ce);return a.formatDistance("xMonths",p,s)}var g=d%12,f=Math.floor(d/12);return g<3?a.formatDistance("aboutXYears",f,s):g<9?a.formatDistance("overXYears",f,s):a.formatDistance("almostXYears",f+1,s)}function me(e,t){return b(1,arguments),ue(e,Date.now(),t)}function pe(){const e=ge(),t=e=>{localStorage.setItem(e.ID,JSON.stringify(e))};return{findNextListID:()=>{const e=Object.keys(localStorage);let t=0;return e.length>0&&(t=e.reduce((function(e,t){return Math.max(e,t)}),-1/0)+1),t},addListItemToDB:t,getListItemDetails:(e,t)=>{let n=[];const a=Object.keys(localStorage);for(let e in a){const t=JSON.parse(localStorage.getItem(a[e]));null!=t&&n.push(t)}if("isParent"==e)return n.filter((function(e){return"parent"==e.parentList&&1==e.committed}));if("get1Item"==e&&t>-1)return n.find((e=>e.ID==t));if("getListItemChildren"==e){const e=n.filter((function(e){return e.parentList==t}));return e.sort((function(e,t){let n=0;const a=new Date;let i=y(M(e.dueDate),a),r=y(M(t.dueDate),a);return isNaN(i)&&(n+=-100),i>r&&(n+=-1),i<r&&(n+=1),n})),e}return"uncommitted"==e?n.filter((function(e){return 0==e.committed})):void 0},createListObjectFromStorage:t=>e.newListItem(t.ID,t.title,t.dueDate,t.importance,t.pinned,t.parentList,t.selected,t.committed,t.completed),addStateSelected:e=>{e.selected=!0,t(e)},removeStateSelected:e=>{e.selected=!1,t(e)},daysUntilDue:e=>{const t=M(e.dueDate);let n={};if(""==e.dueDate&&(n.daysUntilDue="0",n.daysUntilDueWords="Set a due date..."),""!=e.dueDate){const e=y(t,new Date);e<0?(n.daysUntilDue="-1",n.daysUntilDueWords=`Due ${me(t,{addSuffix:!0})}`):(n.daysUntilDue=e,n.daysUntilDueWords=`Due ${me(t,{addSuffix:!0})}`)}return n},deleteThisObjectFromDB:e=>{localStorage.removeItem(e.ID)}}}function ge(){return{newListItem:(e,t,n,a,i,r,o,s,d)=>{const l=pe(),A=ke();isNaN(e)&&(e=l.findNextListID());const c={ID:e,title:t,dueDate:n,importance:a,pinned:i,parentList:r,selected:o,committed:s,committed:s,completed:d,completed:d,addItemtoDB(){l.addListItemToDB(c)},selectedStateAdd(){l.addStateSelected(c)},selectedStateRemove(){l.removeStateSelected(c)},displayChildList(){A.displayListItemChildren(c)},daysLeftToDue:()=>l.daysUntilDue(c),deleteFromDB(){l.deleteThisObjectFromDB(c)}};return c}}}var fe=n(60),Ce=n(737),he=n(923),Ie=n(245),be=n(360),Be=n(517),xe=n(183),ve=n(200),ye=n(268),we=n(131),Le=n(646),Me=n(746);function ke(){const e=pe(),t=ge(),n=function(){const e=pe();return{createForm:()=>{document.querySelectorAll(".modalFormContainer").forEach((e=>e.remove()));const t=document.querySelector(".mainContainerDiv"),n=document.createElement("div");n.classList.add("modalFormContainer"),t.appendChild(n);const a=document.createElement("form");a.classList.add("formModalListItemEdit"),a.setAttribute("name","modalForm"),a.setAttribute("data-parentList",NaN),a.setAttribute("data-itemID",NaN),a.setAttribute("method","post"),a.setAttribute("action","#"),n.appendChild(a);const i=document.createElement("label");i.setAttribute("for","title"),i.classList.add("formModalLabel"),i.textContent="Note (required)",a.appendChild(i);const r=document.createElement("input");r.setAttribute("type","text"),r.required=!0,r.classList.add("taskFormTitle"),r.classList.add("formModalInput"),r.setAttribute("id","taskFormTitle"),r.setAttribute("name","title"),r.value="n/a",a.appendChild(r);const o=document.createElement("label");o.setAttribute("for","dueDate"),o.classList.add("formModalLabel"),o.textContent="Due Date (optional)",a.appendChild(o);let s=document.createElement("input");s.setAttribute("type","date"),s.setAttribute("id","listFormDueDate"),s.setAttribute("name","dueDate"),s.classList.add("listFormDueDate"),s.classList.add("formModalInput"),s.setAttribute("value",""),a.appendChild(s);const d=document.createElement("button");d.classList.add("formModalDoneButton"),d.textContent="Done",a.appendChild(d);const l=document.createElement("div");l.classList.add("updateHasSavedMessageFormModal"),l.textContent="Saved",a.appendChild(l),a.addEventListener("input",(function(t){const n=t.target.closest("form").dataset.itemid,i=e.getListItemDetails("get1Item",n),o=e.createListObjectFromStorage(i);o.title=r.value,o.dueDate=s.value,o.committed=!0,o.addItemtoDB(o),l.classList.add("updateHasSavedMessageFormModalShow"),a.classList.add("formModalListItemEditSaved")})),l.addEventListener("transitionend",(function(e){e.target.classList.remove("updateHasSavedMessageFormModalShow"),a.classList.remove("formModalListItemEditSaved")})),n.addEventListener("submit",(e=>{e.preventDefault()})),n.addEventListener("click",(e=>{1==!e.target.closest(".formModalListItemEdit")&&A()})),window.addEventListener("keydown",(function(e){"Escape"==e.key&&A()})),d.addEventListener("click",(e=>{A()}));const A=()=>{const t=document.querySelector(".formModalListItemEdit").dataset.itemid,a=e.getListItemDetails("get1Item",t),i=e.createListObjectFromStorage(a),r=e.getListItemDetails("get1Item",i.parentList);e.createListObjectFromStorage(r).displayChildList(),n.classList.remove("formContainerVisible")}},updateInputValues:e=>{const t=document.querySelector(".formModalListItemEdit"),n=document.getElementById("taskFormTitle"),a=document.getElementById("listFormDueDate");n.value=e.title,a.value=e.dueDate,t.setAttribute("data-parentList",e.parentList),t.setAttribute("data-itemID",e.ID)},showForm:()=>{document.getElementById("taskFormTitle").focus(),document.querySelector(".modalFormContainer").classList.add("formContainerVisible")}}}(),a=function(){const e=pe();return{createForm:()=>{document.querySelectorAll(".listModalFormContainer").forEach((e=>e.remove()));const t=document.querySelector(".mainContainerDiv"),n=document.createElement("div");n.classList.add("listModalFormContainer"),t.appendChild(n);const a=document.createElement("form");a.classList.add("listFormModalListItemEdit"),a.setAttribute("name","modalForm"),a.setAttribute("data-parentList",NaN),a.setAttribute("data-itemID",NaN),a.setAttribute("method","post"),a.setAttribute("action","#"),n.appendChild(a);const i=document.createElement("label");i.setAttribute("for","title"),i.classList.add("listFormModalLabel"),i.textContent="List Title",a.appendChild(i);const r=document.createElement("input");r.setAttribute("type","text"),r.required=!0,r.classList.add("listFormTitle"),r.placeholder="List Title",r.classList.add("listFormModalInput"),r.setAttribute("id","listFormTitle"),r.setAttribute("name","title"),a.appendChild(r);const o=document.createElement("button");o.classList.add("listFormModalDoneButton"),o.textContent="Done",a.appendChild(o);const s=document.createElement("div");s.classList.add("listUpdateHasSavedMessageFormModal"),s.textContent="Saved",a.appendChild(s),r.addEventListener("input",(function(t){if(t.target.value.length>0){const n=t.target.closest("form").dataset.itemid,i=e.getListItemDetails("get1Item",n),o=e.createListObjectFromStorage(i);o.title=r.value,o.committed=!0,o.addItemtoDB(o),s.classList.add("listUpdateHasSavedMessageFormModalShow"),a.classList.add("listFormModalListItemEditSaved")}})),s.addEventListener("transitionend",(function(e){e.target.classList.remove("listUpdateHasSavedMessageFormModalShow"),a.classList.remove("listFormModalListItemEditSaved")})),n.addEventListener("submit",(e=>{e.preventDefault()})),n.addEventListener("click",(e=>{1==!e.target.closest(".listFormModalListItemEdit")&&d()})),window.addEventListener("keydown",(function(e){"Escape"==e.key&&d()})),o.addEventListener("click",(e=>{d()}));const d=()=>{const t=ke(),a=document.querySelector(".listFormModalListItemEdit").dataset.itemid,i=e.getListItemDetails("get1Item",a),r=e.createListObjectFromStorage(i);if(1==r.committed){const e=t.addListItemToMenu(r);t.showLeftMenuSelected(e,r,!1),r.displayChildList()}n.classList.remove("listFormContainerVisible")}},updateInputValues:e=>{const t=document.querySelector(".listFormModalListItemEdit");document.getElementById("listFormTitle").value="",t.setAttribute("data-parentList",e.parentList),t.setAttribute("data-itemID",e.ID)},showForm:()=>{document.getElementById("listFormTitle").focus(),document.querySelector(".listModalFormContainer").classList.add("listFormContainerVisible")}}}(),i=()=>{const e=document.querySelector(".mainPageListContent"),t=document.createElement("div");t.classList.add("contentBreakPoint"),t.classList.add("mainPageListContentNewItem"),e.appendChild(t);const n=document.createElement("div");n.classList.add("breakPointHeading"),t.appendChild(n);const a=new Image;a.classList.add("contentBreakPointImg"),a.alt="New",a.src=Ie,n.appendChild(a);const i=document.createElement("h2");i.textContent="New",i.classList.add("breakPointHeadingText"),n.appendChild(i);const r=document.createElement("div");r.classList.add("contentBreakPoint"),r.classList.add("mainPageListContentOverdue"),e.appendChild(r);const o=document.createElement("div");o.classList.add("breakPointHeading"),r.appendChild(o);const s=new Image;s.classList.add("contentBreakPointImg"),s.alt="Overdue",s.src=he,o.appendChild(s);const d=document.createElement("h2");d.textContent="Overdue",d.classList.add("breakPointHeading"),o.appendChild(d);const l=document.createElement("div");l.classList.add("contentBreakPoint"),l.classList.add("mainPageListContentNextWeek"),e.appendChild(l);const A=document.createElement("div");A.classList.add("breakPointHeading"),l.appendChild(A);const c=new Image;c.classList.add("contentBreakPointImg"),c.alt="Due this week",c.src=be,A.appendChild(c);const u=document.createElement("h2");u.textContent="In the next week",u.classList.add("breakPointHeading"),A.appendChild(u);const m=document.createElement("div");m.classList.add("contentBreakPoint"),m.classList.add("mainPageListContentAfterNextWeek"),e.appendChild(m);const p=document.createElement("div");p.classList.add("breakPointHeading"),m.appendChild(p);const g=new Image;g.classList.add("contentBreakPointImg"),g.alt="Due over a week away",g.src=Be,p.appendChild(g);const f=document.createElement("h2");f.textContent="More than a week away",f.classList.add("breakPointHeading"),p.appendChild(f);const C=document.createElement("div");C.classList.add("contentBreakPoint"),C.classList.add("mainPageListContentNoDateSet"),e.appendChild(C);const h=document.createElement("div");h.classList.add("breakPointHeading"),C.appendChild(h);const I=new Image;I.classList.add("contentBreakPointImg"),I.alt="Due over a week away",I.src=xe,h.appendChild(I);const b=document.createElement("h2");b.textContent="No due date",b.classList.add("breakPointHeading"),h.appendChild(b);const B=document.createElement("div");B.classList.add("contentBreakPoint"),B.classList.add("mainPageListContentComplete"),e.appendChild(B);const x=document.createElement("div");x.classList.add("breakPointHeading"),B.appendChild(x);const v=new Image;v.classList.add("contentBreakPointImg"),v.alt="Due over a week away",v.src=ve,x.appendChild(v);const y=document.createElement("h2");y.textContent="Completed",y.classList.add("breakPointHeading"),x.appendChild(y)},r=e=>{const n=t.newListItem(NaN,"","",1,!1,e,!1,!1,!1);n.addItemtoDB(),s(n).querySelector("input").focus()},o=e=>{e.classList.contains("contentBreakPointShow")||e.classList.add("contentBreakPointShow")},s=t=>{const a=t.daysLeftToDue();let i=document.querySelector(".mainPageListContent");1==t.completed?(i=document.querySelector(".mainPageListContentComplete"),o(i)):0==t.committed?(i=document.querySelector(".mainPageListContentNewItem"),o(i)):a.daysUntilDue<0?(i=document.querySelector(".mainPageListContentOverdue"),o(i)):a.daysUntilDue>0&&a.daysUntilDue<=7?(i=document.querySelector(".mainPageListContentNextWeek"),o(i)):a.daysUntilDue>7?(i=document.querySelector(".mainPageListContentAfterNextWeek"),o(i)):0==a.daysUntilDue&&(i=document.querySelector(".mainPageListContentNoDateSet"),o(i));const r=document.createElement("div");r.classList.add("mainPageListItemCard"),i.insertBefore(r,i.firstChild),(e=>{const t=e.querySelector(".breakPointHeading");e.insertBefore(t,e.firstChild)})(i);const s=document.createElement("div");s.classList.add("mainPageListItemContentLeft"),r.appendChild(s);let l=document.createElement("form");l.classList.add("mainPageListItemForm"),l.setAttribute("data-parentList",t.parentList),l.setAttribute("data-itemid",t.ID),l.setAttribute("method","post"),l.setAttribute("action","#"),s.appendChild(l),l.addEventListener("submit",(e=>{e.preventDefault()}));let A=document.createElement("input");A.setAttribute("type","text"),A.setAttribute("name","List Item Title"),A.classList.add("listFormTitleText"),""==t.title?A.placeholder="Task Title ":A.value=t.title,l.appendChild(A);let c=document.createElement("button");c.textContent=`${a.daysUntilDueWords}`,c.classList.add("formDisplayDueDate"),s.appendChild(c),t.title.length>0&&(c.classList.add("formDisplayDueDateShow"),1==t.completed&&c.classList.add("formDisplayDueDateCompleted"));const u=document.createElement("div");u.classList.add("mainPageListItemContentRight"),r.appendChild(u);const m=document.createElement("button");m.classList.add("checkBoxImgButton"),m.classList.add("listFormActionButton"),u.appendChild(m);const p=new Image;1==t.completed?p.src=Le:p.src=Me,p.classList.add("checkBoxImgEle"),p.alt="Checkbox: Mark this entry as complete",m.appendChild(p),m.addEventListener("click",(function(n){n.target.closest(".mainPageListItemCard"),document.querySelector(".mainPageListContentComplete"),t.completed=!t.completed,t.addItemtoDB();const a=e.getListItemDetails("get1Item",t.parentList);e.createListObjectFromStorage(a).displayChildList()}));const g=document.createElement("button");g.classList.add("pencilImgButton"),g.classList.add("listFormActionButton"),u.appendChild(g);const f=new Image;f.src=ye,f.classList.add("pencilImgEle"),f.alt="Pencil: Edit this entry",g.appendChild(f);const C=document.createElement("button");C.classList.add("trashImgButton"),C.classList.add("listFormActionButton"),u.appendChild(C);const h=new Image;h.src=we,h.alt="Bin: Delete this entry",h.classList.add("trashImgEle"),C.appendChild(h);const I=document.createElement("p");return I.classList.add("updateHasSavedMessage"),I.textContent="Saved",I.setAttribute("data-savedtag",t.ID),u.appendChild(I),A.addEventListener("input",(function(e){if(e.target.value.length>0){t.title=e.target.value,t.committed=!0,t.addItemtoDB(t);const n=document.querySelector(`p[data-savedtag="${t.ID}"]`);n.classList.add("updateHasSavedMessageShow"),n.addEventListener("transitionend",(function(e){n.classList.remove("updateHasSavedMessageShow")})),e.target.closest(".mainPageListItemContentLeft").querySelector(".formDisplayDueDate").classList.add("formDisplayDueDateShow")}})),r.addEventListener("click",(function(e){e.target.classList.contains("trashImgButton")||e.target.classList.contains("trashImgEle")||d(e.target.closest(".mainPageListItemCard"))})),C.addEventListener("click",(function(e){const n=e.target.closest(".mainPageListItemCard");1==confirm(`Delete: \n\nTitle: ${t.title}`)&&(n.remove(),t.deleteFromDB())})),r.addEventListener("mouseenter",(e=>{e.target.classList.add("mainPageListItemCardMouseInside")})),r.addEventListener("mouseleave",(e=>{e.target.classList.remove("mainPageListItemCardMouseInside")})),c.addEventListener("click",(function(e){n.updateInputValues(t),n.showForm(t)})),g.addEventListener("click",(function(e){n.updateInputValues(t),n.showForm()})),1==t.selected&&d(r),l},d=t=>{document.querySelectorAll(".mainPageListItemCardActive").forEach((t=>{t.classList.remove("mainPageListItemCardActive");const n=t.querySelector(".mainPageListItemForm").dataset.itemid,a=e.getListItemDetails("get1Item",n),i=e.createListObjectFromStorage(a);i.selected=!1,i.addItemtoDB()}));const n=t.querySelector(".mainPageListItemForm").dataset.itemid,a=e.getListItemDetails("get1Item",n),i=e.createListObjectFromStorage(a);i.selected=!0,i.addItemtoDB(),t.classList.add("mainPageListItemCardActive")},l=e=>{const t=document.querySelector(".leftMenuProjectItemList"),n=document.createElement("button");n.classList.add("leftMenuProjectItem"),n.setAttribute("data-listitemid",e.ID),t.insertBefore(n,t.firstChild);const a=new Image;a.classList.add("ListImgEle"),a.alt="list icon",a.src=fe,a.setAttribute("data-listitemid",e.ID),n.appendChild(a);const i=document.createElement("p");return i.classList.add("leftMenuProjectItemText"),i.textContent=e.title+" ("+e.ID+")",i.setAttribute("data-listitemid",e.ID),n.appendChild(i),n.addEventListener("click",(function(e){u(),c(e.target)})),(e=>{const t=document.querySelector(".navAddNewItem"),n=document.querySelector(".leftMenuProjectItemList");n.insertBefore(t,n.firstChild)})(),n},A=(t,n,a)=>{const i=document.querySelectorAll(".leftMenuItemShowAsSelected");if(null!=i&&0==a)for(let t=0;t<i.length;t++){const n=e.getListItemDetails("get1Item",i[t].dataset.listitemid);e.createListObjectFromStorage(n).selectedStateRemove(),i[t].classList.remove("leftMenuItemShowAsSelected")}const r=t.closest("button");1==n.selected&&r.classList.add("leftMenuItemShowAsSelected")},c=t=>{const n=e.getListItemDetails("get1Item",t.dataset.listitemid),a=e.createListObjectFromStorage(n);1!=a.selected&&(a.selectedStateAdd(),A(t,a,!1),a.displayChildList(),m())},u=()=>{const t=e.getListItemDetails("uncommitted");for(let n=0;n<t.length;n++)e.createListObjectFromStorage(t[n]).deleteFromDB()},m=e=>{const t=document.querySelector(".burgerFlyOutButton"),n=document.querySelector(".navAddNewItem"),a=document.querySelector(".leftMenu"),i=document.querySelector(".leftMenuProjectItemList");"flyOut"==e?(t.classList.add("burgerFlyOutButtonHide"),n.classList.add("navAddNewItemLeftMenuOut"),a.classList.add("leftMenuFlyOut"),i.classList.add("leftMenuProjectItemListShow")):(t.classList.remove("burgerFlyOutButtonHide"),n.classList.remove("navAddNewItemLeftMenuOut"),a.classList.remove("leftMenuFlyOut"),i.classList.remove("leftMenuProjectItemListShow"))};return{initialSetUp:()=>{const r=document.createElement("div");r.classList.add("content"),document.querySelector("body").appendChild(r);const o=document.createElement("section");o.classList.add("mainContainerDiv"),r.appendChild(o);const s=document.createElement("div");s.classList.add("leftMenu"),o.appendChild(s);const d=document.createElement("button");d.classList.add("burgerFlyOutButton"),s.appendChild(d);const c=new Image;c.classList.add("burgerFlyOut"),c.alt="Show Menu",c.src=Ce,d.appendChild(c),d.addEventListener("click",(e=>{m("flyOut")}));const u=document.createElement("nav");u.classList.add("leftMenuProjectItemList"),s.appendChild(u);const p=document.createElement("div");p.classList.add("mainPageListContainer"),o.appendChild(p);const g=document.createElement("nav");g.classList.add("mainPageListContentNavBar"),p.appendChild(g);const f=document.createElement("section");f.classList.add("mainPageListContent"),p.appendChild(f),i();const C=document.createElement("button");C.textContent="New List ++",C.classList.add("navAddNewItem"),u.insertBefore(C,u.firstChild),0==localStorage.length&&t.newListItem(NaN,"To Do List","",1,!1,"parent",!0,!0,!1).addItemtoDB();const h=e.getListItemDetails("isParent",null);for(let t=0;t<h.length;t++){const n=e.createListObjectFromStorage(h[t]),a=l(n);A(a,n,!0),1==n.selected&&n.displayChildList()}n.createForm(),a.createForm()},initialEventListeners:()=>{const e=document.querySelector(".leftMenu");e.addEventListener("mouseenter",(e=>{m("flyOut")})),e.addEventListener("mouseleave",(e=>{m("flyIn")})),document.querySelectorAll(".leftMenuProjectItem").forEach((e=>e.addEventListener("click",(function(e){c(e.target)})))),document.querySelector(".navAddNewItem").addEventListener("click",(function(e){u();const n=t.newListItem(NaN,"","",1,!1,"parent",!0,!1,!1);n.addItemtoDB(),a.updateInputValues(n),m(),a.showForm(n)}))},addListItemToMenu:l,displayListItemChildren:t=>{const n=e.getListItemDetails("getListItemChildren",t.ID),a=document.querySelector(".mainPageListContent");for(;a.firstChild;)a.removeChild(a.firstChild);i();const o=document.querySelector(".listTitle");null!=o&&o.remove();const d=document.querySelector(".mainPageListContentNavBar"),l=t.title,A=document.createElement("h2");if(A.classList.add("listTitle"),A.textContent=l,d.appendChild(A),1==t.selected){if(n.length>0)for(let t in n){const a=e.createListObjectFromStorage(n[t]);s(a)}else r(t.ID);const a=document.querySelector(".buttonAddAnotherMainPageListItem");null!=a&&a.remove();const i=document.createElement("button");i.classList.add("buttonAddAnotherMainPageListItem"),i.textContent="+ Add Task",i.alt="Add a task to this list",d.appendChild(i),i.addEventListener("click",(function(e){r(t.ID)}))}},showLeftMenuSelected:A,deleteUncommittedEntries:u}}const Se=ke();Se.initialSetUp(),Se.initialEventListeners()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,